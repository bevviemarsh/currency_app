{"version":3,"sources":["components/SetValues.js","components/SetConversion.js","components/AddConversion.js","components/TransactionsList.js","components/Summary.js","components/App.js","actions/actions.js","actions/actionTypes.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["SetValues","state","name","amountOfEuro","zloty","handleSubmit","e","preventDefault","Number","props","add","setState","handleChange","target","id","value","className","onSubmit","this","type","placeholder","onChange","Component","connect","conversion","SetConversion","AddConversion","TransactionsList","transactions","deleteTransaction","listOfTransactions","map","transaction","key","toFixed","onClick","Summary","length","result","uniqueTransaction","sum","reduce","a","b","parseFloat","index","sort","splice","join","numIndex","theHighest","filter","App","counter","addConversion","setConversion","addTransaction","dispatch","actions","Boolean","window","location","hostname","match","initState","rootReducer","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3638c592.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../styles/SetValues.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass SetValues extends Component {\r\n  state = {\r\n    name: \"\",\r\n    amountOfEuro: \"\",\r\n    zloty: \"\"\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (\r\n      !this.state.name ||\r\n      !this.state.amountOfEuro ||\r\n      !Number(this.state.amountOfEuro)\r\n    ) {\r\n      this.setState({\r\n        amountOfEuro: \"\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.props.add(this.state);\r\n\r\n    this.setState({\r\n      name: \"\",\r\n      amountOfEuro: \"\",\r\n      zloty: \"\"\r\n    });\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form\r\n          id=\"transaction\"\r\n          className=\"setValuesForm\"\r\n          onSubmit={this.handleSubmit}\r\n        >\r\n          <div className=\"contName\">\r\n            <span>Name of transaction: </span>\r\n            <input\r\n              id=\"name\"\r\n              className=\"input nameOfTransaction\"\r\n              type=\"text\"\r\n              placeholder=\"text\"\r\n              value={this.state.name}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"contEuro\">\r\n            <span>Amount of euro:</span>\r\n            <input\r\n              id=\"amountOfEuro\"\r\n              className=\"input cash\"\r\n              type=\"text\"\r\n              placeholder=\"number\"\r\n              value={this.state.amountOfEuro}\r\n              onChange={this.handleChange}\r\n            />\r\n            <span>EURO</span>\r\n          </div>\r\n          <button className=\"setButton\">Add</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    conversion: state.conversion\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(SetValues);\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/SetConversion.css\";\r\n\r\nclass SetConversion extends Component {\r\n  state = {\r\n    conversion: \"\"\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (!Number(this.state.conversion)) {\r\n      this.setState({\r\n        conversion: \"\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.props.add(this.state.conversion);\r\n\r\n    this.setState({\r\n      conversion: \"\"\r\n    });\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        id=\"conversion\"\r\n        className=\"setConversionForm\"\r\n        onSubmit={this.handleSubmit}\r\n      >\r\n        <div className=\"contPln\">\r\n          <span>1 EURO =</span>\r\n          <input\r\n            id=\"conversion\"\r\n            className=\"input cash\"\r\n            type=\"text\"\r\n            placeholder=\"number\"\r\n            value={this.state.conversion}\r\n            onChange={this.handleChange}\r\n          />\r\n          <span>PLN</span>\r\n        </div>\r\n        <button className=\"setButton\">Set</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SetConversion;\r\n","import React from \"react\";\r\nimport \"../styles/AddConversion.css\";\r\n\r\nconst AddConversion = ({ conversion }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"conversion\">\r\n        <span>Current conversion:</span>\r\n        <span>\r\n          <span className=\"zlotyConversion\">\r\n            {conversion ? conversion : \"--\"}\r\n          </span>\r\n          PLN\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddConversion;\r\n","import React from \"react\";\r\nimport \"../styles/TransactionsList.css\";\r\n\r\nconst TransactionsList = ({ transactions, deleteTransaction, conversion }) => {\r\n  const listOfTransactions = transactions.map(transaction => {\r\n    return (\r\n      <li className=\"transactions\" key={transaction.id}>\r\n        {transaction.name}:\r\n        <span className=\"numberOnList\">{transaction.amountOfEuro}</span> EURO =\r\n        <span className=\"numberOnList\">\r\n          {(transaction.amountOfEuro * conversion).toFixed(2)}\r\n        </span>\r\n        PLN\r\n        <button\r\n          className=\"deleteButton\"\r\n          onClick={() => {\r\n            deleteTransaction(transaction.id);\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n  return (\r\n    <div>\r\n      <ul className=\"list\">{listOfTransactions}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionsList;\r\n","import React from \"react\";\r\nimport \"../styles/Summary.css\";\r\n\r\nconst Summary = ({ transactions, conversion }) => {\r\n  if (transactions.length === 0) {\r\n    return (\r\n      <div>\r\n        <div className=\"summaryBox\">\r\n          <span className=\"nameOfResult\">Sum of transcations</span>\r\n          <span className=\"result\">0 PLN</span>\r\n          <span className=\"nameOfResult\">The highest transaction</span>\r\n          <span className=\"result\">--</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (transactions.length === 1) {\r\n    const result = transactions.map(transaction =>\r\n      (transaction.amountOfEuro * conversion).toFixed(2)\r\n    );\r\n\r\n    const uniqueTransaction = transactions.map(transaction => {\r\n      return (\r\n        <div className=\"theHighestBox\" key={transaction.id}>\r\n          {transaction.name}:\r\n          <span className=\"numberOnList\">{transaction.amountOfEuro}</span>\r\n          EURO =\r\n          <span className=\"numberOnList\">\r\n            {(transaction.amountOfEuro * conversion).toFixed(2)}\r\n          </span>\r\n          PLN\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"summaryBox\">\r\n          <span className=\"nameOfResult\">Sum of transcations</span>\r\n          <span className=\"result\">{result} PLN</span>\r\n          <span className=\"nameOfResult\">The highest transaction</span>\r\n          <span className=\"result\">{uniqueTransaction}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    const result = transactions.map(\r\n      transaction => transaction.amountOfEuro * conversion\r\n    );\r\n    const sum = result.reduce((a, b) => {\r\n      const sumResult = parseFloat(a) + parseFloat(b);\r\n      const newSumResult = sumResult.toFixed(2);\r\n      return newSumResult;\r\n    });\r\n\r\n    const order = result.sort((a, b) => b - a).splice(0, result.length);\r\n    const index = order.splice(0, 1).join(\"\");\r\n    const numIndex = parseFloat(index).toFixed(2);\r\n\r\n    const theHighest = transactions\r\n      .filter(\r\n        transaction =>\r\n          (transaction.amountOfEuro * conversion).toFixed(2) === numIndex\r\n      )\r\n      .map(transaction => {\r\n        return (\r\n          <div className=\"theHighestBox\" key={transaction.id}>\r\n            {transaction.name}:\r\n            <span className=\"numberOnList\">{transaction.amountOfEuro}</span>\r\n            EURO =\r\n            <span className=\"numberOnList\">\r\n              {(transaction.amountOfEuro * conversion).toFixed(2)}\r\n            </span>\r\n            PLN\r\n          </div>\r\n        );\r\n      });\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"summaryBox\">\r\n          <span className=\"nameOfResult\">Sum of transcations</span>\r\n          <span className=\"result\">{sum} PLN</span>\r\n          <span className=\"nameOfResult\">The highest transaction</span>\r\n          <span className=\"result\">{theHighest}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Summary;\r\n","import React, { Component } from \"react\";\nimport SetValues from \"./SetValues\";\nimport SetConversion from \"./SetConversion\";\nimport AddConversion from \"./AddConversion\";\nimport TransactionsList from \"./TransactionsList\";\nimport Summary from \"./Summary\";\nimport \"../styles/App.css\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/actions\";\n\nclass App extends Component {\n  counter = 0;\n\n  state = {\n    transactions: []\n  };\n\n  addConversion = conversion => {\n    this.props.setConversion(conversion);\n  };\n\n  addTransaction = transaction => {\n    if (this.props.conversion === \"\") {\n      return;\n    }\n\n    transaction.zloty = this.props.conversion * transaction.amountOfEuro;\n\n    transaction.zloty = parseFloat(transaction.zloty).toFixed(2);\n\n    transaction.id = this.counter;\n    this.counter++;\n\n    let transactions = [...this.state.transactions, transaction];\n\n    this.setState({\n      transactions\n    });\n  };\n\n  deleteTransaction = id => {\n    let transactions = this.state.transactions.filter(transaction => {\n      return transaction.id !== id;\n    });\n\n    this.setState({\n      transactions\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <div className=\"containerTransactions\">\n            <h1 className=\"header\">SET ALL VALUES</h1>\n            <div className=\"formContainer\">\n              <SetConversion add={this.addConversion} />\n              <AddConversion conversion={this.props.conversion} />\n              <SetValues add={this.addTransaction} />\n            </div>\n          </div>\n          <div className=\"containerList\">\n            <h1 className=\"header\">LIST OF TRANSACTIONS</h1>\n            <TransactionsList\n              transactions={this.state.transactions}\n              deleteTransaction={this.deleteTransaction}\n              conversion={this.props.conversion}\n            />\n          </div>\n          <div className=\"containerSummary\">\n            <h1 className=\"header\">SUMMARY</h1>\n            <Summary\n              transactions={this.state.transactions}\n              conversion={this.props.conversion}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    conversion: state.conversion\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setConversion: conversion => dispatch(actions.setConversion(conversion))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const setConversion = conversion => {\r\n  return {\r\n    type: actionTypes.SET_CONVERSION,\r\n    conversion\r\n  };\r\n};\r\n","export const SET_CONVERSION = \"SET_CONVERSION\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst initState = {\r\n  conversion: \"\"\r\n};\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_CONVERSION:\r\n      return {\r\n        ...state,\r\n        conversion: action.conversion\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}